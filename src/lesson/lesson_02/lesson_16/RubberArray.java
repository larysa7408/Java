package lesson.lesson_02.lesson_16;

public class RubberArray {
    ///////// 1 Создали класс у которого есть 2 поля где есть МАССИВ int[] array и  int cursor указатель
    ///////// 2 В конструкторе класса  public RubberArray() инициализировали массив делая его длиной 10 равным содержащим 10 элементов
    ///////// 3 Написали метод void add который принимает int и это значение добавляет в массив на следующий пустой индекс  cursor++ передвигает
    ///////// 4 Написали метод который возвращает строку в котором перечисленны все значимые элементы


    //Свои данные нужно скрывать
    private int[] array;//1/МАССИВ интов который называется array. чтобы работа была более комфортной и универсальной
    // чтобы инкапсулировать наши данные мы должны поставить private в наши поля
    private int cursor;// 4/ текущий ИНДЕКС массива которому мы будем присваивать значение по умолчанию 0// чтобы записать наш массив нам нужен индекс

    //cursor это длина внутреннего  значения значиемого массива
    public RubberArray() {//2/ Создали КОНСТРУКТОР класса кот ничего не будет принимать кот будет производить начальную инициализацию массива
        array = new int[10];// по умолчанию (int )длиной = 10 элементов
        // !!!! array это ссылка в жту ссылку создаем элемент массива на 10 элементов new int[10]
    }

//7Конструктор, принимающий в себя обычный массив и создающий RubberArray с такими де значениями

    public RubberArray(int[] ints) {
        array = new int[ints.length * 2];
        this.cursor = cursor;

        for (int i = 0; i < ints.length; i++) {
            add(ints[i]);
        }
    }

    public void add(int number) {// 3/По нашей задумке мы должны иметь  МЕТОД который будет называться add и принимать значение (int number)
        //Добавлять значение в наш массив

        //Проверка. есть ли место в нашем внутреннем массиве?

        if (cursor > array.length * 0.9) {// Проверяем есть ли место во внутреннем массиве
            // ||||| array.length длина в массиве если cursor превысил длину массива надо вызвать МЕТОД  expandArray()
            expandArray();// метод расширяющий наш массив
        }
        array[cursor] = number; // в текущий array по ИНДЕКСУ [cursor] нужно сделать вписать то что в методе number
        cursor++; // и сдвинуть  cursor
    } // После того как будет вызван МЕТОД ADD состояние  запишется в массив
    // Чтобы проверить как работает наш метод ADD нужно создать метод который выведет в консоль значения массив

    //динамическое изменение размера массива
    public void expandArray() {// Создали метод
        System.out.println("Расширяем массив! ===============" + cursor);
        // 1. создать новый массив большего размера
        // 2. Переписать значения из старого массива в новый
        // 3. Перебросить ссылку

        int[] newArray = new int[array.length * 2]; //создаю новый массив называем newArray,( array.length * 2) в 2 раза больше предыдущего

        //нужен цикл который переберет все существующие элементы в нашем старом и перепишет с такими же индексами в новый массив
        for (int i = 0; i < cursor; i++) {
            newArray[i] = array[i];//Переписать значения из старого массива в новый

        }
        array = newArray;//// 3. Перебросить ссылку. Переменная array теперь хранит ссылку на "новый" массив
        System.out.println("Расширение массива завершено ============");

    }

    //Вывод в консоль для значения массива
    public String toString() { // выводим МЕТОД который выведет в консоль, для этого нужно перебрать МАССИВ элементы которые мы будем добавлять
        if (cursor == 0)
            return "[]"; // поправляем метод и добавляем если cursor == 0 у нас в метод ничего не записанно тоесть у нас еще ничего не записанно то будет "[]"
        //

        String result = "[";
        for (int i = 0; i < cursor; i++) { // Открываем ЦИКЛ for от 0 до cursor
            result += array[i] + ((i < cursor - 1) ? "," : "]"); // добавить в result текущий значение array[i] и добавить  i меньше курсора и меньше еденицы
            //то тогда добавить запятую  если нет то тогда добавить закрыващую скобку

        }
        return result;
    }

    //3 Добавлять в массив сразу несколько элементов
    //void add(int number, int number2){ можно  написать так
    void add(int... ints) { // универсальное решение что метод может принимает какое то количество интов
        //ints -я могу с ним обращаться точно также как с ссылкой на массив
        for (int i = 0; i < ints.length; i++) {
            add(ints[i]);
        }
    }


    public int size() { // текущее количество элементов в массиве метод не  принимает должен вернуть какое то интовое значение

        return cursor;
    }

    public int get(int index) { //6Возвращение значения по индексу
        if (index >= 0 && index < cursor) { // проверяем входящий индекс который прислал нам позьзователь
            // индекс больше нуля и меньше чем курсор
            return array[index]; //обращаемся к аrray[index] и отправить вызов по индексу
        } else {
            return Integer.MIN_VALUE;//хорошего решения на этой стадии нет
            //TODO Поправить если нужно сделать поправки или что то дописать
        }
    }

    //8 Поиск элемента по значению ( у нас есть значение надо узнать есть ли такое значение в массиве
    public int indexOf(int value) {
        //так int в качестве значения а не индекса проверять нам его не нужно
        for (int i = 0; i < cursor; i++) {
            if (array[i] == value) return i; //если текущее значение array[i равно равно того что мы ищем

        }
        return -1; // если мы прошли массив и ничего не нашли значит ретурн -1
    }

    //    Удаление элемента по индексу
    public int remove(int index) {
        // 1. Проверка
        if (index < 0 && index >= cursor) {
            // такого индекса в массиве нет
            return Integer.MIN_VALUE;
        }

        int value = array[index];

        for (int i = index; i < cursor - 1; i++) {
            array[i] = array[i + 1];
        }

        cursor--;

        return value;
    }

    public boolean removeByValue(int value) {
        // Понять есть ли такой элемент в массиве
        // Если нет - вернуть false и закончить работу методы
        // если есть - получить его индекс
        // переиспользовать метод, удаляющий по индексу.

        int index = indexOf(value);
        // Ctrl + Alt + <- вернуть курсор на предыдущую позицию

        if (index == -1) return false;

        remove(index);
        return true;

    }
}
/*
1 Динaмическое изменение размера массива
2 Добавлять в массив элементы
3 Добавлять в массив сразу несколько элементов
4 Вывод в консоль значений массива
5 Текущее количество элементов в массиве
6Возвращение значения по индексу
7Конструктор, принимающий в себя обычный массив и создающий RubberArray с такими де значениями
8Поиск элемента по значению
9Замена значения по индексу (есть индекс и новое значение)
10Замена значения по значению (есть старое и новое значение)
11Удаление элемента по индексу
12Удаление элемента по значению

 */
/*
В резиновом массиве должны быть реализованы методы:

для чего все это делаем чтобы показать как мы можем расширить функционал

что такое класс - это капсула  которой есть внутри под капотом массива
и мы дописываем к этому массиву набор методов для работы с этим массивом
вызываем метод АДД пишем туда кучу значений и все эти значения будут помещены в мвссив
внутренний массив имеет технические значения он имеет 10 значений заполненые нулями
пользователь нули не добавляет колво который добавил пользователь при создании класса
именно на колво указывает курсор также он указывает на ноль в ячейке внутреннего массива


 */